#!/usr/bin/env bash
#===============================
# GRUB Security: Set Bootloader Password
# Configures password protection for the GRUB2 boot menu using /etc/grub.d.
#===============================

# --- Configuration ---
# Preferred place for custom user/password settings
CUSTOM_CFG="/etc/grub.d/01_users"
# Default superuser name (can be changed if needed)
GRUB_SUPERUSER="root"
AUDIT_LOG="/var/log/security_hardening.log" # Optional central log
# --- End Configuration ---

# Function to log messages
log_action() {
    echo "$(date): $1" | tee -a "$AUDIT_LOG"
}

# Check if running as root
if [ "$EUID" -ne 0 ]; then
  log_action "‚ùå Error: This script must be run as root."
  exit 1
fi

# Check for required tool: grub2-mkpasswd-pbkdf2
 if ! command -v grub2-mkpasswd-pbkdf2 &> /dev/null; then
    log_action "‚ùå Error: 'grub2-mkpasswd-pbkdf2' command not found. Install 'grub2-tools' or equivalent package."
    exit 1
fi
 # Check for required tool: grub2-mkconfig
 if ! command -v grub2-mkconfig &> /dev/null; then
    log_action "‚ùå Error: 'grub2-mkconfig' command not found. Install 'grub2-tools' or equivalent package."
    exit 1
fi


# --- Functions ---

# Function to generate a hashed password using grub2-mkpasswd-pbkdf2
generate_hashed_password() {
    local password
    local confirm_password
    while true; do
        echo -e "\nüîí Enter a strong password for the GRUB superuser ('$GRUB_SUPERUSER'):"
        read -s -p "Password: " password # -s hides input
        echo ""
        read -s -p "Confirm Password: " confirm_password
        echo ""

        if [ -z "$password" ]; then
            echo -e "\n‚ùå Password cannot be empty. Please try again."
        elif [ "$password" != "$confirm_password" ]; then
            echo -e "\n‚ùå Passwords do not match. Please try again."
        else
            break # Passwords match and are not empty
        fi
    done
    # Generate and return the hash
    # Use printf to avoid issues with echo -e potentially interpreting backslashes
    printf "%s\n%s" "$password" "$password" | grub2-mkpasswd-pbkdf2 | awk '/grub.pbkdf2/ {print $NF}'
}

# Function to set GRUB password using the custom config file
set_grub_password() {
    local hashed_password
    log_action "Generating GRUB password hash for user '$GRUB_SUPERUSER'..."
    hashed_password=$(generate_hashed_password)

    if [ -z "$hashed_password" ]; then
        log_action "‚ùå Error: Failed to generate password hash. Exiting."
        exit 1
    fi

    log_action "Creating/Updating GRUB user configuration file: $CUSTOM_CFG"
    # Create the custom config file with superuser and password
    # This structure makes it runnable by /etc/grub.d/ update mechanism
    cat << EOF > "$CUSTOM_CFG"
#!/bin/shGRUB user/password configuration generated by secure_grub_password.shDO NOT EDIT DIRECTLY - Rerun script to change passwordMake this file executable by grub-mkconfigexec tail -n +5 $0GRUB configuration commands belowcat << EOFCFGset superusers="${GRUB_SUPERUSER}"password_pbkdf2 ${GRUB_SUPERUSER} ${hashed_password}EOFCFGEOF    # Set correct permissions for the custom config file to be executable
    chmod 750 "$CUSTOM_CFG" # Executable for root, readable for group (optional)
    log_action "‚úÖ Custom GRUB user configuration created/updated in $CUSTOM_CFG."
}

# Function to update GRUB configuration
update_grub_config() {
    log_action "Updating GRUB2 configuration (grub2-mkconfig)..."
    local grub_cfg_path=""
    # Detect BIOS vs UEFI and find the correct target grub.cfg
    if [ -d /sys/firmware/efi ]; then
        log_action "UEFI system detected."
        # Common UEFI paths - add others if needed
        for path in "/boot/efi/EFI/redhat/grub.cfg" "/boot/efi/EFI/centos/grub.cfg" "/boot/efi/EFI/fedora/grub.cfg" "/boot/efi/EFI/ubuntu/grub.cfg" "/boot/efi/EFI/debian/grub.cfg"; do
            if [ -f "$path" ]; then
                grub_cfg_path="$path"
                break
            fi
        done
        if [ -z "$grub_cfg_path" ]; then
             # Fallback for other UEFI systems
             grub_cfg_path="/boot/efi/EFI/grub/grub.cfg"
             if [ ! -f "$grub_cfg_path" ]; then
                  log_action "‚ùå Error: Could not automatically determine UEFI grub.cfg path. Please update manually or specify the path."
                  return 1
             fi
        fi
    else
        log_action "BIOS system detected."
        grub_cfg_path="/boot/grub2/grub.cfg" # Standard BIOS path
         if [ ! -f "$grub_cfg_path" ]; then
              # Check alternative BIOS path
              grub_cfg_path="/boot/grub/grub.cfg"
              if [ ! -f "$grub_cfg_path" ]; then
                   log_action "‚ùå Error: Could not find BIOS grub.cfg at standard locations. Please update manually."
                   return 1
              fi
         fi
    fi

    log_action "Updating GRUB configuration file: $grub_cfg_path"
    if grub2-mkconfig -o "$grub_cfg_path"; then
         log_action "‚úÖ GRUB2 configuration updated successfully."
         return 0
    else
         log_action "‚ùå Error: Failed to update GRUB2 configuration using grub2-mkconfig."
         return 1
    fi
}

# --- Main Execution ---
log_action "üîê Securing the GRUB2 Bootloader with a Password..."

# Check if password seems already set in the custom file
if [ -f "$CUSTOM_CFG" ] && grep -q "password_pbkdf2" "$CUSTOM_CFG"; then
    log_action "‚ÑπÔ∏è A GRUB user configuration file ($CUSTOM_CFG) already exists."
    read -p "‚ùì Do you want to overwrite it and set a new password? (y/N): " overwrite
    if [[ ! "$overwrite" =~ ^[Yy]$ ]]; then
        log_action "Skipping password setup as file exists and user chose not to overwrite."
        exit 0
    fi
     log_action "Proceeding to overwrite existing GRUB user configuration."
fi

set_grub_password
if update_grub_config; then
    log_action "üöÄ Bootloader password protection has been configured successfully!"
    log_action "The user '$GRUB_SUPERUSER' is now the superuser."
    log_action "You will need to enter the password to access the GRUB menu or edit boot entries."
else
    log_action "‚ùå An error occurred during GRUB configuration."
    log_action "Please review the output and check GRUB configuration manually."
    log_action "The user config may be in $CUSTOM_CFG, but grub2-mkconfig failed."
    exit 1
fi
